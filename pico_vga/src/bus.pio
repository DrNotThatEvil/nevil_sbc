; This pio programm allows a Z80 bus to:
; - read from the RPI pico by providing an address (read_data)
; - write a value to the RPI pico to a memory address (write_data)


    ; set the pin assignment:
    ; The starting point of the 8 bit Data D0 - D7
.define PUBLIC D0 0
    ; Chip enable (and clk)
.define PUBLIC CE (D0 + 8)
    ; Read write signal
.define PUBLIC RW (CE + 1)
    ; The starting point of the 16 bit Address A0 - A2 (3 bits used)
.define PUBLIC A0 (RW + 1)
    ; IRQ flag for IRQ request to cpu
.define PUBLIC CIRQ (A0 + 3)
    ; Direction of data level shifter
.define PUBLIC DIR (CIRQ + 1)

.program bus_read

.wrap_target
    ; set pins:  MSB = OE, LSB = DIR, so 0b10 is OE=1 and DIR=0
    ; set the default: OE=1 and DIR=0
    set pins 0b0
    ; wait for RD to become 0
    wait 1 GPIO RW
    wait 1 GPIO CE
    ; read the data (8 bits) and addres (2 + 3 bits)
    in pins 13
    ; push the data and address to the RxFIFO
    push
    ; get the new data to set as output
    pull block
    ; set the data bits on the bus 
    out pins 8
    ; set OE=0 and DIR=0
    ; set pins 0b00
    ; wait for RD to become 1, then wait 3 cycles
    wait 0 GPIO CE [3]
    ; go back to the default state
.wrap

.program bus_write

.wrap_target
start:
    ; set pins:
    ; set the default: OE=1 and DIR=0
    set pins 0b0
    ; wait for WR to become 0
    wait 0 GPIO RW
    wait 1 GPIO CE
    ; set OE=0 and DIR=0
    set pins 0b1
    ; read the data (8 bits) and addres (2 + 3 bits)
    in pins 13
    ; push the data and address to the RxFIFO
    push
    ; wait for WR to become 1, then wait 3 cycles
    wait 0 GPIO CE [3]
    ; go back to the default state
.wrap